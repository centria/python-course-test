{"componentChunkName":"component---src-templates-docs-js","path":"/part2","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Part 2 - Terminology\",\n  \"nav_order\": 3,\n  \"hidden\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"sentence\"\n  }, \"Sentence\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Lause\"), \" (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"statement\"), \") is the part of a program that performs an action. Often a sentence refers to a single command.\"), mdx(\"p\", null, \"For example, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print (\\\" Hi! \\\")\"), \" Is a phrase that prints line text,\\nand \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number = 2\"), \" is a statement that sets a value for the variable.\"), mdx(\"p\", null, \"The sentence can also be more complex, and there can be other sentences inside.\\nFor example, the following conditional sentence consists of three lines:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"if name == \\\"Enter\\\":\\n    print (\\\"Hi!\\\")\\n    number = 2\\n\")), mdx(\"p\", null, \"In this case, there are two sentences within the conditional sentence.\"), mdx(\"h2\", {\n    \"id\": \"block\"\n  }, \"Block\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Block\"), \" is a set of consecutive sentences that are at the same level in the program structure. For example, a conditional statement in a block contains statements that are executed when the condition is true.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"if ika> 17:\\n    The block in the # conditional statement begins\\n    print (\\\"You're an adult!\\\")\\n    ika = ika + 1\\n    print (\\\"now a year older ...\\\")\\n    # block ends\\n\\nprint (\\\"this is in a different block\\\")\\n\")), mdx(\"p\", null, \"In Python, a block is expressed by indenting the block code, or sentences, to the same level.\"), mdx(\"p\", null, \"It is worth noting that the \\\"main block\\\" of Python must be indented on the left side of the file:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"# this program does not work because the code is not indented\\n  print (\\\"hey world\\\")\\n  print (\\\"bad program ...\\\")\\n\")), mdx(\"h2\", {\n    \"id\": \"function\"\n  }, \"Function\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Function\"), \" performs an action. A function can have one or more \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"parameters\"), \" that indicate exactly what the function should do.\"), mdx(\"p\", null, \"A function is executed when it is \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"called\"), \", that is, the code contains the name of the function and the parameters given to the function in parentheses. For example, the following code calls the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"print\"), \" function with the parameter\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"this is a parameter\\\"\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"print (\\\"this is a parameter\\\")\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \", which reads input from the user, is also a function. As a parameter, the function receives a message to be displayed to the user:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"name = input (\\\"Tell your name:\\\")\\n\")), mdx(\"p\", null, \"In this case, the function \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"resets\"), \" the value, which means that the value appears in the function call point after the function is executed. The value returned by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" function is the text entered by the user as a string. The value returned by a function is often placed as the value of a variable so that the value can be utilized in the program.\"), mdx(\"h2\", {\n    \"id\": \"type\"\n  }, \"Type\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Type\"), \" means what a value in the code is. For example, in the following code, the type of the variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" is a string and the type of the variable\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \" result\"), \" is an integer:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"name = \\\"Enter\\\"\\nresult = 100\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" function tells you the type of an expression. For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"print (type (\\\"Anna\\\"))\\nprint (type (100))\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#sentence","title":"Sentence"},{"url":"#block","title":"Block"},{"url":"#function","title":"Function"},{"url":"#type","title":"Type"}]},"frontmatter":{"title":"Part 2 - Terminology"}}},"pageContext":{"id":"ad8a7dfc-1a68-5fd5-8182-e2f4d2053ac8"}},"staticQueryHashes":["1885717130","1950529541","2744905544","3020054368"]}